/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
export type SchemaRetrieve200Four = { [key: string]: {} };

export type SchemaRetrieve200Three = { [key: string]: {} };

export type SchemaRetrieve200Two = { [key: string]: {} };

export type SchemaRetrieve200One = { [key: string]: {} };

export type SchemaRetrieveLang = typeof SchemaRetrieveLang[keyof typeof SchemaRetrieveLang];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SchemaRetrieveLang = {
  af: "af",
  ar: "ar",
  "ar-dz": "ar-dz",
  ast: "ast",
  az: "az",
  be: "be",
  bg: "bg",
  bn: "bn",
  br: "br",
  bs: "bs",
  ca: "ca",
  ckb: "ckb",
  cs: "cs",
  cy: "cy",
  da: "da",
  de: "de",
  dsb: "dsb",
  el: "el",
  en: "en",
  "en-au": "en-au",
  "en-gb": "en-gb",
  eo: "eo",
  es: "es",
  "es-ar": "es-ar",
  "es-co": "es-co",
  "es-mx": "es-mx",
  "es-ni": "es-ni",
  "es-ve": "es-ve",
  et: "et",
  eu: "eu",
  fa: "fa",
  fi: "fi",
  fr: "fr",
  fy: "fy",
  ga: "ga",
  gd: "gd",
  gl: "gl",
  he: "he",
  hi: "hi",
  hr: "hr",
  hsb: "hsb",
  hu: "hu",
  hy: "hy",
  ia: "ia",
  id: "id",
  ig: "ig",
  io: "io",
  is: "is",
  it: "it",
  ja: "ja",
  ka: "ka",
  kab: "kab",
  kk: "kk",
  km: "km",
  kn: "kn",
  ko: "ko",
  ky: "ky",
  lb: "lb",
  lt: "lt",
  lv: "lv",
  mk: "mk",
  ml: "ml",
  mn: "mn",
  mr: "mr",
  ms: "ms",
  my: "my",
  nb: "nb",
  ne: "ne",
  nl: "nl",
  nn: "nn",
  os: "os",
  pa: "pa",
  pl: "pl",
  pt: "pt",
  "pt-br": "pt-br",
  ro: "ro",
  ru: "ru",
  sk: "sk",
  sl: "sl",
  sq: "sq",
  sr: "sr",
  "sr-latn": "sr-latn",
  sv: "sv",
  sw: "sw",
  ta: "ta",
  te: "te",
  tg: "tg",
  th: "th",
  tk: "tk",
  tr: "tr",
  tt: "tt",
  udm: "udm",
  ug: "ug",
  uk: "uk",
  ur: "ur",
  uz: "uz",
  vi: "vi",
  "zh-hans": "zh-hans",
  "zh-hant": "zh-hant"
} as const;

export type SchemaRetrieveFormat = typeof SchemaRetrieveFormat[keyof typeof SchemaRetrieveFormat];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SchemaRetrieveFormat = {
  json: "json",
  yaml: "yaml"
} as const;

export type SchemaRetrieveParams = {
  format?: SchemaRetrieveFormat;
  lang?: SchemaRetrieveLang;
};

export type ProductsFilterListParams = {
  /**
   * A page number within the paginated result set.
   */
  page?: number;
  /**
   * Number of results to return per page.
   */
  page_size?: number;
};

export interface ViewOrder {
  apartment?: string | null;
  baza_loyalty?: number;
  city?: string | null;
  email: string;
  frame?: string | null;
  house?: string | null;
  readonly id: number;
  is_paid?: boolean;
  is_received?: boolean;
  name: string;
  order_date?: string;
  payment_type: PaymentTypeEnum;
  phone: string;
  readonly products: string;
  receiving: ReceivingEnum;
  receiving_date?: string | null;
  status?: StatusEnum;
  street?: string | null;
  surname: string;
}

export interface UserDataSerialzier {
  apartment?: string | null;
  birthday_date: string;
  city?: string | null;
  readonly email: string;
  frame?: string | null;
  house?: string | null;
  readonly id: number;
  name?: string | null;
  readonly phone: string;
  street?: string | null;
  surname?: string | null;
}

/**
 * * `created` - Created
 * `paid` - Paid
 * `in_delivery` - In Delivery
 * `delivered` - Delivered
 * `received` - Received
 */
export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusEnum = {
  created: "created",
  paid: "paid",
  in_delivery: "in_delivery",
  delivered: "delivered",
  received: "received"
} as const;

/**
 * * `delivery_address` - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏
 * `delivery_stock` - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞
 * `pickup` - –°–∞–º–æ–≤—ã–≤–æ–∑
 */
export type ReceivingEnum = typeof ReceivingEnum[keyof typeof ReceivingEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReceivingEnum = {
  delivery_address: "delivery_address",
  delivery_stock: "delivery_stock",
  pickup: "pickup"
} as const;

export interface Product {
  category: number;
  readonly color_images: string;
  description?: string | null;
  readonly full_path: string;
  readonly id: number;
  image?: string;
  readonly modifications: string;
  name: string;
  path: AloneProductPath;
  price: number;
  readonly slug_path: string;
}

export interface PhoneNumber {
  phone: string;
}

/**
 * * `online` - –ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω
 * `cash` - –ù–∞–ª–∏—á–Ω—ã–º–∏
 * `fps` - –°–ë–ü
 */
export type PaymentTypeEnum = typeof PaymentTypeEnum[keyof typeof PaymentTypeEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentTypeEnum = {
  online: "online",
  cash: "cash",
  fps: "fps"
} as const;

export interface Payment {
  readonly amount: number;
  readonly description: string;
  readonly details: string;
  readonly error_code: string;
  readonly id: number;
  readonly message: string;
  readonly order_id: string;
  readonly payment_id: string;
  /** –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤. */
  readonly payment_url: string;
  readonly status: string;
  readonly success: boolean;
}

export interface PaginatedListProductList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: ListProduct[];
}

export interface Login {
  code: string;
  phone: string;
}

export interface ListProducts {
  readonly colors_count: string;
  readonly images: string;
  readonly modification_id: string;
  readonly name: string;
  readonly old_price: string;
  readonly path: string;
  readonly price: string;
  readonly product_id: string;
  readonly slug: string;
}

export interface ListProduct {
  readonly colours: string;
  readonly id: number;
  image?: string;
  readonly modifications: string;
  name: string;
  path: AloneProductPath;
  price: number;
}

export interface Cart {
  readonly product: string;
  quantity?: number;
}

export interface AloneProductPath {
  readonly id: number;
  name: string;
  slug?: string;
}

