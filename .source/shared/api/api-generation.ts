/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

export type SchemaRetrieve200Four = {[key: string]: {}};

export type SchemaRetrieve200Three = {[key: string]: {}};

export type SchemaRetrieve200Two = {[key: string]: {}};

export type SchemaRetrieve200One = {[key: string]: {}};

export type SchemaRetrieveLang = typeof SchemaRetrieveLang[keyof typeof SchemaRetrieveLang];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SchemaRetrieveLang = {
  af: 'af',
  ar: 'ar',
  'ar-dz': 'ar-dz',
  ast: 'ast',
  az: 'az',
  be: 'be',
  bg: 'bg',
  bn: 'bn',
  br: 'br',
  bs: 'bs',
  ca: 'ca',
  ckb: 'ckb',
  cs: 'cs',
  cy: 'cy',
  da: 'da',
  de: 'de',
  dsb: 'dsb',
  el: 'el',
  en: 'en',
  'en-au': 'en-au',
  'en-gb': 'en-gb',
  eo: 'eo',
  es: 'es',
  'es-ar': 'es-ar',
  'es-co': 'es-co',
  'es-mx': 'es-mx',
  'es-ni': 'es-ni',
  'es-ve': 'es-ve',
  et: 'et',
  eu: 'eu',
  fa: 'fa',
  fi: 'fi',
  fr: 'fr',
  fy: 'fy',
  ga: 'ga',
  gd: 'gd',
  gl: 'gl',
  he: 'he',
  hi: 'hi',
  hr: 'hr',
  hsb: 'hsb',
  hu: 'hu',
  hy: 'hy',
  ia: 'ia',
  id: 'id',
  ig: 'ig',
  io: 'io',
  is: 'is',
  it: 'it',
  ja: 'ja',
  ka: 'ka',
  kab: 'kab',
  kk: 'kk',
  km: 'km',
  kn: 'kn',
  ko: 'ko',
  ky: 'ky',
  lb: 'lb',
  lt: 'lt',
  lv: 'lv',
  mk: 'mk',
  ml: 'ml',
  mn: 'mn',
  mr: 'mr',
  ms: 'ms',
  my: 'my',
  nb: 'nb',
  ne: 'ne',
  nl: 'nl',
  nn: 'nn',
  os: 'os',
  pa: 'pa',
  pl: 'pl',
  pt: 'pt',
  'pt-br': 'pt-br',
  ro: 'ro',
  ru: 'ru',
  sk: 'sk',
  sl: 'sl',
  sq: 'sq',
  sr: 'sr',
  'sr-latn': 'sr-latn',
  sv: 'sv',
  sw: 'sw',
  ta: 'ta',
  te: 'te',
  tg: 'tg',
  th: 'th',
  tk: 'tk',
  tr: 'tr',
  tt: 'tt',
  udm: 'udm',
  ug: 'ug',
  uk: 'uk',
  ur: 'ur',
  uz: 'uz',
  vi: 'vi',
  'zh-hans': 'zh-hans',
  'zh-hant': 'zh-hant',
} as const;

export type SchemaRetrieveFormat = typeof SchemaRetrieveFormat[keyof typeof SchemaRetrieveFormat];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SchemaRetrieveFormat = {
  json: 'json',
  yaml: 'yaml',
} as const;

export type SchemaRetrieveParams = {
format?: SchemaRetrieveFormat;
lang?: SchemaRetrieveLang;
};

export type ProductsFilterListParams = {
/**
 * A page number within the paginated result set.
 */
page?: number;
/**
 * Number of results to return per page.
 */
page_size?: number;
};

export interface ViewOrder {
  apartment?: string | null;
  baza_loyalty?: number;
  city?: string | null;
  email: string;
  frame?: string | null;
  house?: string | null;
  readonly id: number;
  is_paid?: boolean;
  is_received?: boolean;
  name: string;
  order_date?: string;
  payment_type: PaymentTypeEnum;
  phone: string;
  readonly products: string;
  receiving: ReceivingEnum;
  receiving_date?: string | null;
  status?: StatusEnum;
  street?: string | null;
  surname: string;
}

export interface UserDataSerialzier {
  apartment?: string | null;
  birthday_date: string;
  city?: string | null;
  readonly email: string;
  frame?: string | null;
  house?: string | null;
  readonly id: number;
  name?: string | null;
  readonly phone: string;
  street?: string | null;
  surname?: string | null;
}

/**
 * * `created` - Created
* `paid` - Paid
* `in_delivery` - In Delivery
* `delivered` - Delivered
* `received` - Received
 */
export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusEnum = {
  created: 'created',
  paid: 'paid',
  in_delivery: 'in_delivery',
  delivered: 'delivered',
  received: 'received',
} as const;

/**
 * * `delivery_address` - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏
* `delivery_stock` - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞
* `pickup` - –°–∞–º–æ–≤—ã–≤–æ–∑
 */
export type ReceivingEnum = typeof ReceivingEnum[keyof typeof ReceivingEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReceivingEnum = {
  delivery_address: 'delivery_address',
  delivery_stock: 'delivery_stock',
  pickup: 'pickup',
} as const;

export interface Product {
  category: number;
  readonly color_images: string;
  description?: string | null;
  readonly full_path: string;
  readonly id: number;
  image?: string;
  readonly modifications: string;
  name: string;
  path: AloneProductPath;
  price: number;
  readonly slug_path: string;
}

export interface PhoneNumber {
  phone: string;
}

/**
 * * `online` - –ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω
* `cash` - –ù–∞–ª–∏—á–Ω—ã–º–∏
* `fps` - –°–ë–ü
 */
export type PaymentTypeEnum = typeof PaymentTypeEnum[keyof typeof PaymentTypeEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentTypeEnum = {
  online: 'online',
  cash: 'cash',
  fps: 'fps',
} as const;

export interface Payment {
  readonly amount: number;
  readonly description: string;
  readonly details: string;
  readonly error_code: string;
  readonly id: number;
  readonly message: string;
  readonly order_id: string;
  readonly payment_id: string;
  /** –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤. */
  readonly payment_url: string;
  readonly status: string;
  readonly success: boolean;
}

export interface PaginatedListProductList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: ListProduct[];
}

export interface Login {
  code: string;
  phone: string;
}

export interface ListProducts {
  readonly colors_count: string;
  readonly images: string;
  readonly modification_id: string;
  readonly name: string;
  readonly old_price: string;
  readonly path: string;
  readonly price: string;
  readonly product_id: string;
  readonly slug: string;
}

export interface ListProduct {
  readonly colours: string;
  readonly id: number;
  image?: string;
  readonly modifications: string;
  name: string;
  path: AloneProductPath;
  price: number;
}

export interface Cart {
  readonly product: string;
  quantity?: number;
}

export interface AloneProductPath {
  readonly id: number;
  name: string;
  slug?: string;
}





  export const authLoginCreate = <TData = AxiosResponse<Login>>(
    login: Login, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/login/`,
      login,options
    );
  }

export const authLogoutRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/auth/logout/`,options
    );
  }

export const authPhoneCodeRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/auth/phone-code/`,options
    );
  }

export const authSendCodeCreate = <TData = AxiosResponse<PhoneNumber>>(
    phoneNumber: PhoneNumber, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/send-code/`,
      phoneNumber,options
    );
  }

export const ordersCalculateRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/orders/calculate/`,options
    );
  }

export const ordersOrdersRetrieve = <TData = AxiosResponse<ViewOrder>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/orders/orders/`,options
    );
  }

export const ordersOrdersCreate = <TData = AxiosResponse<ViewOrder>>(
    viewOrder: NonReadonly<ViewOrder>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/orders/orders/`,
      viewOrder,options
    );
  }

export const ordersPaymentRetrieve = <TData = AxiosResponse<Payment>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/orders/payment/`,options
    );
  }

export const ordersPaymentStatusRetrieve = <TData = AxiosResponse<Payment>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/orders/payment/status/`,options
    );
  }

export const productsDetailRetrieve = <TData = AxiosResponse<void>>(
    slug: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/products/detail/${slug}/`,options
    );
  }

export const productsFilterList = <TData = AxiosResponse<PaginatedListProductList>>(
    params?: ProductsFilterListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/products/filter/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const productsPathRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/products/path/`,options
    );
  }

export const productsProductRetrieve = <TData = AxiosResponse<Product>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/products/product/${id}/`,options
    );
  }

export const productsProductsList = <TData = AxiosResponse<ListProducts[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/products/products/`,options
    );
  }

export const profileCartRetrieve = <TData = AxiosResponse<Cart>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/profile/cart/`,options
    );
  }

export const profileCartCreate = <TData = AxiosResponse<Cart>>(
    cart: NonReadonly<Cart>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/profile/cart/`,
      cart,options
    );
  }

export const profileCartDestroy = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/profile/cart/`,options
    );
  }

export const profileCartAddCreate = <TData = AxiosResponse<Cart>>(
    cart: NonReadonly<Cart>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/profile/cart/add/`,
      cart,options
    );
  }

export const profileCartClearRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/profile/cart/clear/`,options
    );
  }

export const profileCartMaximizationRetrieve = <TData = AxiosResponse<Cart>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/profile/cart/maximization/`,options
    );
  }

export const profileCartRemoveCreate = <TData = AxiosResponse<Cart>>(
    cart: NonReadonly<Cart>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/profile/cart/remove/`,
      cart,options
    );
  }

export const profileFavoritesRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/profile/favorites/`,options
    );
  }

export const profileFavoritesCreate = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/profile/favorites/`,undefined,options
    );
  }

export const profileFavoritesDestroy = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/profile/favorites/`,options
    );
  }

export const profileInfoRetrieve = <TData = AxiosResponse<UserDataSerialzier>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/profile/info/`,options
    );
  }

export const profileInfoCreate = <TData = AxiosResponse<UserDataSerialzier>>(
    userDataSerialzier: NonReadonly<UserDataSerialzier>, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/profile/info/`,
      userDataSerialzier,options
    );
  }

export const profileSearchAddressRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/profile/search-address/`,options
    );
  }

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.

- YAML: application/vnd.oai.openapi
- JSON: application/vnd.oai.openapi+json
 */
export const schemaRetrieve = <TData = AxiosResponse<SchemaRetrieve200One | SchemaRetrieve200Two | SchemaRetrieve200Three | SchemaRetrieve200Four>>(
    params?: SchemaRetrieveParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/schema/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export type AuthLoginCreateResult = AxiosResponse<Login>
export type AuthLogoutRetrieveResult = AxiosResponse<void>
export type AuthPhoneCodeRetrieveResult = AxiosResponse<void>
export type AuthSendCodeCreateResult = AxiosResponse<PhoneNumber>
export type OrdersCalculateRetrieveResult = AxiosResponse<void>
export type OrdersOrdersRetrieveResult = AxiosResponse<ViewOrder>
export type OrdersOrdersCreateResult = AxiosResponse<ViewOrder>
export type OrdersPaymentRetrieveResult = AxiosResponse<Payment>
export type OrdersPaymentStatusRetrieveResult = AxiosResponse<Payment>
export type ProductsDetailRetrieveResult = AxiosResponse<void>
export type ProductsFilterListResult = AxiosResponse<PaginatedListProductList>
export type ProductsPathRetrieveResult = AxiosResponse<void>
export type ProductsProductRetrieveResult = AxiosResponse<Product>
export type ProductsProductsListResult = AxiosResponse<ListProducts[]>
export type ProfileCartRetrieveResult = AxiosResponse<Cart>
export type ProfileCartCreateResult = AxiosResponse<Cart>
export type ProfileCartDestroyResult = AxiosResponse<void>
export type ProfileCartAddCreateResult = AxiosResponse<Cart>
export type ProfileCartClearRetrieveResult = AxiosResponse<void>
export type ProfileCartMaximizationRetrieveResult = AxiosResponse<Cart>
export type ProfileCartRemoveCreateResult = AxiosResponse<Cart>
export type ProfileFavoritesRetrieveResult = AxiosResponse<void>
export type ProfileFavoritesCreateResult = AxiosResponse<void>
export type ProfileFavoritesDestroyResult = AxiosResponse<void>
export type ProfileInfoRetrieveResult = AxiosResponse<UserDataSerialzier>
export type ProfileInfoCreateResult = AxiosResponse<UserDataSerialzier>
export type ProfileSearchAddressRetrieveResult = AxiosResponse<void>
export type SchemaRetrieveResult = AxiosResponse<SchemaRetrieve200One | SchemaRetrieve200Two | SchemaRetrieve200Three | SchemaRetrieve200Four>
